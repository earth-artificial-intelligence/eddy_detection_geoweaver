[{
  "history_id" : "rp62nbhj415",
  "history_input" : "#predict eddies on testdataset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_components import *\nfrom training_and_plot_utils  import *\nfrom device_config_and_data_loader import *\nimport os\nfrom fetch_data_utils import *\nfrom dependency import *\n\nprev_date, prev_month, prev_year = get_dates_with_delta(331)\n\ndata_root = os.path.join(os.path.expanduser(\"~\"), root_path)\n\nval_folder = os.path.join(data_root, \"cds_ssh_test_everyday_interval\")\n\nprev_date = int(prev_date)\nprev_month = int(prev_month)\nprev_year = int(prev_year)\n\nval_file = os.path.join(val_folder, f\"subset_pet_masks_with_adt_{prev_year:04d}{prev_month:02d}{prev_date:02d}_lat14N-46N_lon166W-134W.npz\")\n\nbinary = False\nnum_classes = 2 if binary else 3\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/test/\",f\"{prev_year:04d}{prev_month:02d}{prev_date:02d}_contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\n      \n      \nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\n      \n      \nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nRead 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nTotal number of pixels in training set: 0.39 megapixels across 24 SSH maps\nNumber of pixels that are not eddies: 0.28 megapixels (72.00%)\nNumber of pixels that are anticyclonic eddies: 0.06 megapixels (14.23%)\nNumber of pixels that are cyclonic eddies: 0.05 megapixels (13.77%)\n\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-05-24_01-17\n======================================================================\nRead 1 samples from /home/chetana/ML_eddis/cds_ssh_test_everyday_interval/subset_pet_masks_with_adt_20220627_lat14N-46N_lon166W-134W.npz.\n/home/chetana/tensorboard/2023-05-24_01-17/test_predictions.gif\n2023-05-24 01:17:37,826 INFO Animation.save using <class 'matplotlib.animation.PillowWriter'>\nNumber of anticyclonic eddies: 90\nNumber of cyclonic eddies: 67\nNumber of both eddies: 98\nAverage contour area: 48.27 sq. pixels\n",
  "history_begin_time" : 1684891042999,
  "history_end_time" : 1684891059017,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "mefya1xrayo",
  "history_input" : "#predict eddies on testdataset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_components import *\nfrom training_and_plot_utils  import *\nfrom device_config_and_data_loader import *\nimport os\nfrom fetch_data_utils import *\n\nprev_date, prev_month, prev_year = get_dates_with_delta(331)\n\ndata_root = os.path.join(os.path.expanduser(\"~\"), \"ML_test\")\n\nval_folder = os.path.join(data_root, \"cds_ssh_test_everyday_interval\")\n\nprev_date = int(prev_date)\nprev_month = int(prev_month)\nprev_year = int(prev_year)\n\nval_file = os.path.join(val_folder, f\"subset_pet_masks_with_adt_{prev_year:04d}{prev_month:02d}{prev_date:02d}_lat14N-46N_lon166W-134W.npz\")\n\nbinary = False\nnum_classes = 2 if binary else 3\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/test/\",f\"{prev_year:04d}{prev_month:02d}{prev_date:02d}_contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\n      \n      \nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\n      \n      \nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nRead 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nTotal number of pixels in training set: 0.39 megapixels across 24 SSH maps\nNumber of pixels that are not eddies: 0.28 megapixels (72.00%)\nNumber of pixels that are anticyclonic eddies: 0.06 megapixels (14.23%)\nNumber of pixels that are cyclonic eddies: 0.05 megapixels (13.77%)\n\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-05-16_20-18\n======================================================================\nRead 1 samples from /home/chetana/ML_test/cds_ssh_test_everyday_interval/subset_pet_masks_with_adt_20220619_lat14N-46N_lon166W-134W.npz.\n/home/chetana/tensorboard/2023-05-16_20-18/test_predictions.gif\n2023-05-16 20:18:54,280 INFO Animation.save using <class 'matplotlib.animation.PillowWriter'>\nNumber of anticyclonic eddies: 94\nNumber of cyclonic eddies: 69\nNumber of both eddies: 108\nAverage contour area: 43.55 sq. pixels\n",
  "history_begin_time" : 1684268328856,
  "history_end_time" : 1684268335194,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "soxdizxyu10",
  "history_input" : "#predict eddies on testdataset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_components import *\nfrom training_and_plot_utils  import *\nfrom device_config_and_data_loader import *\nimport os\nfrom fetch_data_utils import *\n\nprev_date, prev_month, prev_year = get_dates_with_delta(331)\n\ndata_root = os.path.join(os.path.expanduser(\"~\"), \"ML_test\")\n\nval_folder = os.path.join(data_root, \"cds_ssh_test_everyday_interval\")\n\nprev_date = int(prev_date)\nprev_month = int(prev_month)\nprev_year = int(prev_year)\n\nval_file = os.path.join(val_folder, f\"subset_pet_masks_with_adt_{prev_year:04d}{prev_month:02d}{prev_date:02d}_lat14N-46N_lon166W-134W.npz\")\n\nbinary = False\nnum_classes = 2 if binary else 3\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/test/\",f\"{prev_year:04d}{prev_month:02d}{prev_date:02d}_contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\n      \n      \nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\n      \n      \nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nRead 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nTotal number of pixels in training set: 0.39 megapixels across 24 SSH maps\nNumber of pixels that are not eddies: 0.28 megapixels (72.00%)\nNumber of pixels that are anticyclonic eddies: 0.06 megapixels (14.23%)\nNumber of pixels that are cyclonic eddies: 0.05 megapixels (13.77%)\n\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-05-16_20-14\n======================================================================\nRead 1 samples from /home/chetana/ML_test/cds_ssh_test_everyday_interval/subset_pet_masks_with_adt_20220619_lat14N-46N_lon166W-134W.npz.\n/home/chetana/tensorboard/2023-05-16_20-14/test_predictions.gif\n2023-05-16 20:15:00,427 INFO Animation.save using <class 'matplotlib.animation.PillowWriter'>\nNumber of anticyclonic eddies: 94\nNumber of cyclonic eddies: 69\nNumber of both eddies: 108\nAverage contour area: 43.55 sq. pixels\n",
  "history_begin_time" : 1684268094556,
  "history_end_time" : 1684268101558,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "kf75vwj26v6",
  "history_input" : "#predict eddies on testdataset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_components import *\nfrom training_and_plot_utils  import *\nfrom device_config_and_data_loader import *\nimport os\nfrom fetch_data_utils import *\n\nprev_date, prev_month, prev_year = get_dates_with_delta(331)\n\ndata_root = os.path.join(os.path.expanduser(\"~\"), \"ML_test\")\n\nval_folder = os.path.join(data_root, \"cds_ssh_test_everyday_interval\")\n\nprev_date = int(prev_date)\nprev_month = int(prev_month)\nprev_year = int(prev_year)\n\nval_file = os.path.join(val_folder, f\"subset_pet_masks_with_adt_{prev_year:04d}{prev_month:02d}{prev_date:02d}_lat{lat_str}_lon{lon_str}.npz\")\n\nbinary = False\nnum_classes = 2 if binary else 3\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/test/\",f\"{prev_year:04d}{prev_month:02d}{prev_date:02d}_contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\n      \n      \nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\n      \n      \nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nRead 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nTotal number of pixels in training set: 0.39 megapixels across 24 SSH maps\nNumber of pixels that are not eddies: 0.28 megapixels (72.00%)\nNumber of pixels that are anticyclonic eddies: 0.06 megapixels (14.23%)\nNumber of pixels that are cyclonic eddies: 0.05 megapixels (13.77%)\n\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-05-16_20-03\n======================================================================\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/kf75vwj26v6/predict_on_test_data.py\", line 20, in <module>\n    val_file = os.path.join(val_folder, f\"subset_pet_masks_with_adt_{prev_year:04d}{prev_month:02d}{prev_date:02d}_lat{lat_str}_lon{lon_str}.npz\")\nNameError: name 'lat_str' is not defined\n",
  "history_begin_time" : 1684267389775,
  "history_end_time" : 1684267395636,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Failed"
},{
  "history_id" : "l4j1l1bu2iv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684266056689,
  "history_end_time" : 1684266056689,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "3g1exvzycmv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684265995100,
  "history_end_time" : 1684265995100,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "hvj8kiv2snj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684265857019,
  "history_end_time" : 1684265857019,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "xkifm5eaf4q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684265720539,
  "history_end_time" : 1684265720539,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "d4o34p542m5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684265684580,
  "history_end_time" : 1684265684580,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "m80zvq0au3h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684264569983,
  "history_end_time" : 1684264569983,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "8k362b5yiif",
  "history_input" : "#Predict eddies on testset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_utils import *\nfrom set_summary_writer import *\n\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/\",\"contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\n      \n      \nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\n      \n      \nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-05-16_18-57\n======================================================================\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n/home/chetana/tensorboard/2023-05-16_18-57/test_predictions.gif\nNumber of anticyclonic eddies: 104\nNumber of cyclonic eddies: 59\nNumber of both eddies: 119\nAverage contour area: 31.92 sq. pixels\n",
  "history_begin_time" : 1684263444892,
  "history_end_time" : 1684263466099,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "7eq0s4wrlqc",
  "history_input" : "#Predict eddies on testset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_utils import *\nfrom set_summary_writer import *\n\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/\",\"contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\n      \n      \nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\n      \n      \nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-05-16_18-54\n======================================================================\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n/home/chetana/tensorboard/2023-05-16_18-54/test_predictions.gif\nNumber of anticyclonic eddies: 104\nNumber of cyclonic eddies: 59\nNumber of both eddies: 119\nAverage contour area: 31.92 sq. pixels\n",
  "history_begin_time" : 1684263267124,
  "history_end_time" : 1684263288536,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "0hojf7lqkv3",
  "history_input" : "#Predict eddies on testset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_utils import *\nfrom set_summary_writer import *\n\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/\",\"contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\n      \n      \nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\n      \n      \nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-05-16_18-51\n======================================================================\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n/home/chetana/tensorboard/2023-05-16_18-51/test_predictions.gif\nNumber of anticyclonic eddies: 104\nNumber of cyclonic eddies: 59\nNumber of both eddies: 119\nAverage contour area: 31.92 sq. pixels\n",
  "history_begin_time" : 1684263103889,
  "history_end_time" : 1684263125208,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "fhq1itt653n",
  "history_input" : "#Predict eddies on testset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_utils import *\nfrom set_summary_writer import *\n\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/\",\"contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\n      \n      \nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\n      \n      \nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-05-16_18-46\n======================================================================\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n/home/chetana/tensorboard/2023-05-16_18-46/test_predictions.gif\nNumber of anticyclonic eddies: 104\nNumber of cyclonic eddies: 59\nNumber of both eddies: 119\nAverage contour area: 31.92 sq. pixels\n",
  "history_begin_time" : 1684262757581,
  "history_end_time" : 1684262779105,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "xjqpib3i66f",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684262105034,
  "history_end_time" : 1684262105034,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "mxo9vn5f7aj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684262085482,
  "history_end_time" : 1684262085482,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "1htsrz071wj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684261824590,
  "history_end_time" : 1684261974119,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "iby25zvqhrq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1683063256455,
  "history_end_time" : 1683063256455,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "4poska8nea4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1683063215111,
  "history_end_time" : 1683063215111,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "gk4zzcaoxsn",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1683061007169,
  "history_end_time" : 1683061007169,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "rvzv1inuxgu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1683060956367,
  "history_end_time" : 1683060956367,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "vjvvq6ntsav",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1683060018641,
  "history_end_time" : 1683060018641,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "uzr8kgxb47q",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1683059287077,
  "history_end_time" : 1683059287077,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "g0w62axpbcj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682444006969,
  "history_end_time" : 1682444006969,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "a2s3f6qdrqu",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682443926514,
  "history_end_time" : 1682443979652,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "wtpwq15bg83",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682443685800,
  "history_end_time" : 1682443925654,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "fikhofdtckz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682442641205,
  "history_end_time" : 1682442641205,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "o6cnhe3mwi9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682442532358,
  "history_end_time" : 1682442550968,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "9vgpeihkxlb",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682441929586,
  "history_end_time" : 1682441929586,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "610pss5tx08",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440386654,
  "history_end_time" : 1682440474432,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "lvy2bsqip6s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440235242,
  "history_end_time" : 1682440385654,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "zby3o7pso4r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181470,
  "history_end_time" : 1682440234540,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "nk6dbq6eitf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439988631,
  "history_end_time" : 1682440138041,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "9p67ea0a34r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640527,
  "history_end_time" : 1682439640527,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "c9kqxrsj86b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439488951,
  "history_end_time" : 1682439488951,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "rmhoh06q5ar",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439471668,
  "history_end_time" : 1682439471668,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "yas5fhcqyh0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682437190965,
  "history_end_time" : 1682437217439,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "fwb0tglgxne",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682434977815,
  "history_end_time" : 1682435038062,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "1la98e0ru38",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681846897179,
  "history_end_time" : 1681846897179,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "17rcoh3hfyq",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681846509207,
  "history_end_time" : 1681846782377,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "56v7qk1f4fm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681845552438,
  "history_end_time" : 1681845552438,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "9z3u8p7daik",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681842356463,
  "history_end_time" : 1681842356463,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "7fiksa4glsk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681841806231,
  "history_end_time" : 1681841806231,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "plgshhdqbgl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681841544617,
  "history_end_time" : 1681841544617,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "g1r94728syz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1681841141539,
  "history_end_time" : 1681841141539,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "g39agy3fwbk",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680667091238,
  "history_end_time" : 1680667091238,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "rsimvpctev7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666804801,
  "history_end_time" : 1680666804801,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "bfs1wd7b68v",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666776162,
  "history_end_time" : 1680666801842,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "bwdwp62wjkh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666722516,
  "history_end_time" : 1680666772316,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "ss9xamvypnm",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666673159,
  "history_end_time" : 1680666673159,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "gjroqudvj42",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590269,
  "history_end_time" : 1680666655745,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "fimhxg7xxx1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666547677,
  "history_end_time" : 1680666547677,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "9vpb9fgj236",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666518444,
  "history_end_time" : 1680666547113,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "tbfa727c85f",
  "history_input" : "#predict eddies on testdataset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_utils import *\nfrom set_summary_writer import *\n\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/\",\"contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n",
  "history_output" : "Read 21 samples from /home/chetana/ML_eddies/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-2018_lat14N-46N_lon166W-134W.npz.\nRead 1 samples from /home/chetana/ML_eddies/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-03-28_19-37\n======================================================================\nRead 1 samples from /home/chetana/ML_eddies/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n/home/chetana/tensorboard/2023-03-28_19-37/test_predictions.gif\nNumber of anticyclonic eddies: 104\nNumber of cyclonic eddies: 59\nNumber of both eddies: 119\nAverage contour area: 31.92 sq. pixels\n",
  "history_begin_time" : 1680032257896,
  "history_end_time" : 1680032265039,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "OCCgrCK2agGC",
  "history_input" : "#predict eddies on testdataset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_utils import *\nfrom set_summary_writer import *\n\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/\",\"contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n",
  "history_output" : "Read 21 samples from /home/chetana/ML_eddies/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-2018_lat14N-46N_lon166W-134W.npz.\nRead 1 samples from /home/chetana/ML_eddies/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-03-28_19-21\n======================================================================\nRead 1 samples from /home/chetana/ML_eddies/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\n/home/chetana/tensorboard/2023-03-28_19-21/test_predictions.gif\nNumber of anticyclonic eddies: 104\nNumber of cyclonic eddies: 59\nNumber of both eddies: 119\nAverage contour area: 31.92 sq. pixels\n",
  "history_begin_time" : 1680031309589,
  "history_end_time" : 1680031321844,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "urk4mvszr72",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1680029661161,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "yi3c92pbw19",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1684264550374,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},]
