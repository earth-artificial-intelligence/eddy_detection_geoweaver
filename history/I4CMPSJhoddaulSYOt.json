[{
  "history_id" : "g64bfj57b66",
  "history_input" : "# All frequently used dependency are here\n\nimport os\nimport numpy as np\nimport logging as logger\n\nfrom datetime import datetime\nfrom matplotlib import pyplot as plt\nfrom py_eddy_tracker import data\nfrom py_eddy_tracker.dataset.grid import RegularGridDataset\nfrom copy import deepcopy\n",
  "history_output" : "Running",
  "history_begin_time" : 1680666592055,
  "history_end_time" : 1680666655715,
  "history_notes" : null,
  "history_process" : "0ajbp0",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "f26fvp7wyo3",
  "history_input" : "from dependency import *\n\ndata_root = os.path.join(os.path.expanduser(\"~\"), \"ML_eddies\")\ntrain_folder = os.path.join(data_root, \"cds_ssh_1998-2018_10day_interval\")\ntest_folder = os.path.join(data_root, \"cds_ssh_2019_10day_interval\")\n\nexample_file = os.path.join(test_folder, \"dt_global_twosat_phy_l4_20190110_vDT2021.nc\")",
  "history_output" : "Running",
  "history_begin_time" : 1680666608046,
  "history_end_time" : 1680666655716,
  "history_notes" : null,
  "history_process" : "0ps7es",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "6fgbhqcrc4y",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590211,
  "history_end_time" : 1680666655716,
  "history_notes" : null,
  "history_process" : "ag4g86",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "sj55ls5pq3b",
  "history_input" : "# sea surface height (SSH preprocessing)\n\n\nfrom dependency import *\nfrom plot_utils import plot_variable, save_fig_and_relesase_memory\nfrom data_loader import example_file\n\n\ndate = datetime(2019, 1, 1)\ng = RegularGridDataset(example_file, \"longitude\", \"latitude\")\n\nax, m, fig = plot_variable(\n    g,\n    \"adt\",\n    f\"ADT (m) before high-pass filter\",\n    vmin=-0.15,\n    vmax=0.15,\n)\n\nsave_fig_and_relesase_memory(ax, m, fig)\n\nwavelength_km = 700\ng_filtered = deepcopy(g)\ng_filtered.bessel_high_filter(\"adt\", wavelength_km)\n\nax, m, fig = plot_variable(\n    g_filtered,\n    \"adt\",\n    f\"ADT (m) filtered (Final: {wavelength_km} km)\",\n    vmin=-0.15,\n    vmax=0.15,\n)\n\nsave_fig_and_relesase_memory(ax, m, fig)\n\n",
  "history_output" : "We assume pixel position of grid is centered for /home/chetana/ML_eddies/cds_ssh_2019_10day_interval/dt_global_twosat_phy_l4_20190110_vDT2021.nc\nNo filtering above 85.000000 degrees of latitude\n",
  "history_begin_time" : 1680666612892,
  "history_end_time" : 1680666655716,
  "history_notes" : null,
  "history_process" : "nzlslh",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "wru8r12kc80",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590215,
  "history_end_time" : 1680666655717,
  "history_notes" : null,
  "history_process" : "jajowz",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "mst77ddx5m1",
  "history_input" : "# Generate ground truth on a global scale helper functions\n\nimport multiprocessing\n\nfrom ground_truth_utils import *\n\ndef generate_masks_in_parallel(\n    files,\n    dates,\n    ssh_var=\"adt\",\n    u_var=\"ugosa\",\n    v_var=\"vgosa\",\n    high_pass_wavelength_km=700,\n    x_offset=-180,\n    y_offset=0,\n    num_processes=8,\n    plot=False,\n    save=True,\n    test=False,\n):\n    args = [\n        (file, date, ssh_var, u_var, v_var, high_pass_wavelength_km, x_offset, y_offset)\n        for file, date in zip(files, dates)\n    ]\n    pool = multiprocessing.Pool(processes=num_processes)\n    results = pool.starmap(generate_segmentation_mask_from_file, args)\n\n    vars_ = []\n    vars_filtered = []\n    masks = []\n    for result in results:\n        vars_.append(result[0])\n        vars_filtered.append(result[1])\n        masks.append(result[2])\n\n    # concatenate list into single numpy array and return\n    masks = np.stack(masks, axis=0)\n    vars_ = np.stack(vars_, axis=0).astype(np.float32)\n    vars_filtered = np.stack(vars_filtered, axis=0).astype(np.float32)\n\n    if save:\n        # find common folder across all files\n        common_folder = os.path.commonpath(files)\n        if test is True:\n            common_folder = \"/home/chetana/ML_eddies/cds_ssh_2019_10day_interval\"\n        years = sorted(set([date.year for date in dates]))\n        year_str = f\"{years[0]}\" if len(years) == 1 else f\"{min(years)}-{max(years)}\"\n        save_path = os.path.join(\n            common_folder, f\"global_pet_masks_with_{ssh_var}_{year_str}.npz\"\n        )\n        np.savez_compressed(\n            save_path,\n            masks=masks,\n            dates=dates,\n            var=vars_,\n            var_filtered=vars_filtered,\n        )\n        print(f\"Saved masks to {save_path}\")\n\n    return vars_, vars_filtered, masks\n\n\nfrom itertools import product\n\n\ndef get_dates_and_files(years, months, days, folder, file_pattern):\n    \"\"\"\n    Given a filename pattern and a list of years months and days,\n    fill in the filename pattern with the date and return\n    a list of filenames and a list of associated `datetime` objects.\n\n    Args:\n        years (list): list of years, e.g., [1993, 1994, 1995, 1996]\n        months (list): list of months, e.g., [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n        days (list): list of days, e.g., [1, 10, 20, 30] for every 10th day\n        folder (str): folder where the files are located\n        file_pattern (str): filename pattern, e.g.,\n            \"dt_global_twosat_phy_l4_{year:04d}{month:02d}{day:02d}_vDT2021.nc\"\n\n    Returns:\n        files (list): full/absolute path to each netCDF file in the list of dates\n        dates (list): list of `datetime` objects formed from the combination of years, months and days\n    \"\"\"\n    dates, files = [], []\n    for y, m, d in product(years, months, days):  # cartesian product\n        try:\n            date = datetime(y, m, d)\n            file = os.path.join(folder, file_pattern.format(year=y, month=m, day=d))\n            dates.append(date)\n            files.append(file)\n        # catch ValueError thrown by datetime if date is not valid\n        except ValueError:\n            pass\n    years = f\"{years[0]}\" if len(years) == 1 else f\"{min(years)}-{max(years)}\"\n    print(f\"Found {len(dates)} files for {years}.\")\n    return dates, files\n",
  "history_output" : "",
  "history_begin_time" : 1680666627657,
  "history_end_time" : 1680666655717,
  "history_notes" : null,
  "history_process" : "zhsdwn",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "dhoaw1m1a3r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590219,
  "history_end_time" : 1680666655717,
  "history_notes" : null,
  "history_process" : "zhsdwn",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "r6uukgknrpj",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590220,
  "history_end_time" : 1680666655718,
  "history_notes" : null,
  "history_process" : "g85teu",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "wijyqlxhhqy",
  "history_input" : "# This generates segmentation efficiently in parallel on a gloabal scale\n\n\nimport logging\n\nfrom generate_ground_truth_parallel_utils import *\nfrom data_loader import *\n\n\nlogging.getLogger(\"pet\").setLevel(logging.ERROR)\n\n# enter the AVISO filename pattern\n# year, month, and day in file_pattern will be filled in get_dates_and_files:\nfile_pattern = \"dt_global_twosat_phy_l4_{year:04d}{month:02d}{day:02d}_vDT2021.nc\"\n\n# training set: 1998 - 2018\ntrain_dates, train_files = get_dates_and_files(\n    range(1998, 2019), range(1, 2), [1], train_folder, file_pattern\n)\ntrain_adt, train_adt_filtered, train_masks = generate_masks_in_parallel(\n    train_files, train_dates\n)\n\n\n# test set: 2019\ntest_dates, test_files = get_dates_and_files(\n    [2019], range(1, 13), [10], test_folder, file_pattern\n)\ntest_adt, test_adt_filtered, test_masks = generate_masks_in_parallel(\n    test_files, test_dates\n)",
  "history_output" : "Found 21 files for 1998-2018.\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\nSaved masks to /home/chetana/ML_eddies/cds_ssh_1998-2018_10day_interval/global_pet_masks_with_adt_1998-2018.npz\nFound 12 files for 2019.\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\nSaved masks to /home/chetana/ML_eddies/cds_ssh_2019_10day_interval/global_pet_masks_with_adt_2019.npz\n",
  "history_begin_time" : 1680666632411,
  "history_end_time" : 1680666815363,
  "history_notes" : null,
  "history_process" : "q20jvx",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "aptl51pm5a4",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1680666655723,
  "history_notes" : null,
  "history_process" : "yddm1o",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "kk8les2eux0",
  "history_input" : "from dependency import *\nfrom unzip_utils import *\nfrom get_data import *\n\n\nos.chdir(os.path.expanduser(\"~\"))\ncurrent_working_dir = os.getcwd()\nprint(current_working_dir)\n\n# Directory names\nroot_dir_name = \"ML_eddies\"\ntrain_dir_name = \"cds_ssh_1998-2018_10day_interval\"\ntest_dir_name = \"cds_ssh_2019_10day_interval\"\n\n# Build dir paths\nroot_path = os.path.join(current_working_dir, root_dir_name)\ntrain_path = os.path.join(root_path, train_dir_name)\ntest_path= os.path.join(root_path, test_dir_name)\n\n# Check if dir exists\nis_root_dir_exists = os.path.exists(root_path)\nis_train_dir_exists = os.path.exists(train_path)\nis_test_dir_exists = os.path.exists(test_path)\n\n\ndef create_directory(directory_name):\n    try:\n        os.mkdir(directory_name)\n        logger.info(\"Successfully created folder\")\n    except:\n        logger.error(\"Something went wrong while creating folder\")\n\n\n\nif is_root_dir_exists != True:\n    print(root_path)\n    create_directory(root_path)\n    print(\"created:\",root_path)\n    create_directory(train_path)\n    create_directory(test_path)\n    train_file, test_file = download_data()\n\n    unzip_file( os.path.join(current_working_dir,train_file), train_path)\n    unzip_file( os.path.join(current_working_dir,test_file), test_path)\n\n\nif is_root_dir_exists and is_train_dir_exists != True:\n    create_directory(\"cds_ssh_1998-2018_10day_interval\")\n    train_file = download_train_data()\n    unzip_file( os.path.join(current_working_dir,train_file), train_path)\n\nif  is_root_dir_exists and is_test_dir_exists != True:\n    create_directory(\"cds_ssh_2019_10day_interval\")\n    test_file = download_test_data()\n    unzip_file( os.path.join(current_working_dir,test_file), test_path)\n\n",
  "history_output" : "/home/chetana\n",
  "history_begin_time" : 1680666602271,
  "history_end_time" : 1680666655726,
  "history_notes" : null,
  "history_process" : "dhjb5i",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "fxf2cbxff59",
  "history_input" : "from dependency import logger\nfrom zipfile import ZipFile\n\ndef unzip_file(zip_file_path, extract_to_path):\n    try:\n        with ZipFile(zip_file_path) as zip_file_object:          \n            zip_file_object.extractall(extract_to_path)\n            \n    except:\n        logger.error(\"Something went wrong while extracting File\" )\n",
  "history_output" : "",
  "history_begin_time" : 1680666596289,
  "history_end_time" : 1680666655727,
  "history_notes" : null,
  "history_process" : "zbt6sg",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "fjxfspbdkdp",
  "history_input" : "from dependency import logger\n\nimport cdsapi\n\nclient = cdsapi.Client()\n\n\ndef download_train_data():\n    try:\n        client.retrieve(\n            'satellite-sea-level-global',\n            {\n                'version': 'vDT2021',\n                'variable': 'all',\n                'format': 'zip',\n                'year': [\n                    '1998', '1999', '2000',\n                    '2001', '2002', '2003',\n                    '2004', '2005', '2006',\n                    '2007', '2008', '2009',\n                    '2010', '2011', '2012',\n                    '2013', '2014', '2015',\n                    '2016', '2017', '2018',\n                ],\n                'month': [\n                    '01', '02', '03',\n                    '04', '05', '06',\n                    '07', '08', '09',\n                    '10', '11', '12',\n                ],\n                'day': ['01', '10', '20', '30'],\n            },\n            'train_data.zip')\n        return 'train_data.zip'\n    except:\n        logger.error(\"Something went wrong while downloading training data\")\n\n\ndef download_test_data():\n    try:\n        client.retrieve(\n            'satellite-sea-level-global',\n            {\n                'version': 'vDT2021',\n                'variable': 'all',\n                'format': 'zip',\n                'year': ['2019'],\n                'month': [\n                    '01', '02', '03',\n                    '04', '05', '06',\n                    '07', '08', '09',\n                    '10', '11', '12',\n                ],\n                'day': ['01', '10', '20', '30'],\n            },\n            'test_data.zip')\n        return 'test_data.zip'\n    except:\n        logger.error(\"Something went wrong while downloading test data\")\n\n\ndef download_data():\n    train_zip_file = download_train_data()\n    test_zip_file = download_test_data()\n    return train_zip_file, test_zip_file\n\n\n\ndef download_test_date(year, month, day):\n    if len(month) < 2:\n        month = '0'+month\n\n    if len(day) < 2:\n        day = '0'+day\n\n    fileName = year + \"_\" + month + \"_\" + day + \"_test.zip\"\n\n    try:\n        client.retrieve(\n            'satellite-sea-level-global',\n            {\n                'version': 'vDT2021',\n                'variable': 'all',\n                'format': 'zip',\n                'year': [str(year)],\n                'month': [str(month)],\n                'day': [str(day)],\n            },\n            fileName)\n        return fileName\n    except:\n        logger.error(\"Something went wrong while downloading daily test data\")\n",
  "history_output" : "",
  "history_begin_time" : 1680666597214,
  "history_end_time" : 1680666655727,
  "history_notes" : null,
  "history_process" : "g7a3zf",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "853hdb4wjrs",
  "history_input" : "from dependency import *\nimport sys\n\nsys.path.insert(0, os.path.dirname(os.getcwd()))\n\nos.environ[\"CUDA_DEVICE_ORDER\"] = \"PCI_BUS_ID\"  # see issue #152\nos.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\"   # useful on multi-GPU systems with multiple users\n\n# Fix manual seeds for reproducibility\nimport torch\nseed = 42\ntorch.manual_seed(seed)\nif torch.cuda.is_available():\n    torch.cuda.manual_seed_all(seed)\nnp.random.seed(seed)\n\nnum_epochs = 250  # can lower this to save time\nbatch_size = 256",
  "history_output" : "",
  "history_begin_time" : 1680666591176,
  "history_end_time" : 1680666655727,
  "history_notes" : null,
  "history_process" : "mnmaq1",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "ynpgd12224o",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1680666655728,
  "history_notes" : null,
  "history_process" : "w3hmlz",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "ra1ituc9vx1",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1680666655730,
  "history_notes" : null,
  "history_process" : "28zx21",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "41mu644se1n",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590242,
  "history_end_time" : 1680666655731,
  "history_notes" : null,
  "history_process" : "d6b94y",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "gxjdrq1eebz",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1680666655731,
  "history_notes" : null,
  "history_process" : "mh6f0e",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "bcsreh0lopq",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1680666655733,
  "history_notes" : null,
  "history_process" : "0w1lsj",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "7k06s9jv0v9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590248,
  "history_end_time" : 1680666655735,
  "history_notes" : null,
  "history_process" : "suoxrn",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "ontl0afv00u",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1680666655736,
  "history_notes" : null,
  "history_process" : "ax7g0d",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "5cbbqmxf9st",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590251,
  "history_end_time" : 1680666655738,
  "history_notes" : null,
  "history_process" : "xdwq7e",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "eimbjj2f9c0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590253,
  "history_end_time" : 1680666655738,
  "history_notes" : null,
  "history_process" : "uf6vbr",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "4xojc155kia",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590255,
  "history_end_time" : 1680666655739,
  "history_notes" : null,
  "history_process" : "cxz2e7",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "sikpkne2rr0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590256,
  "history_end_time" : 1680666655739,
  "history_notes" : null,
  "history_process" : "t0vkxi",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "ubxhahmqdma",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1680666655739,
  "history_notes" : null,
  "history_process" : "2x5xrm",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "eikhu0wurpl",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1680666655741,
  "history_notes" : null,
  "history_process" : "3z0gs7",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "q6w3mexoan7",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1680666655743,
  "history_notes" : null,
  "history_process" : "tcr60i",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "5yu832mvd0s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590266,
  "history_end_time" : 1680666655745,
  "history_notes" : null,
  "history_process" : "ejp9sg",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "hhesq2vx74z",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590267,
  "history_end_time" : 1680666655745,
  "history_notes" : null,
  "history_process" : "wn1y5m",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "gjroqudvj42",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590269,
  "history_end_time" : 1680666655745,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "mzmytht9w6r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1680666590271,
  "history_end_time" : 1680666655745,
  "history_notes" : null,
  "history_process" : "znr9qa",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
}]
