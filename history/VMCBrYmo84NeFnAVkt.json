[{
  "history_id" : "es37dj8aqe0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389195,
  "history_end_time" : 1684267389195,
  "history_notes" : null,
  "history_process" : "0ajbp0",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "mfo5ird9e6c",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389196,
  "history_end_time" : 1684267389196,
  "history_notes" : null,
  "history_process" : "tcr60i",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "382jljoerdv",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389196,
  "history_end_time" : 1684267389196,
  "history_notes" : null,
  "history_process" : "znr9qa",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "pbd5yx569d9",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389196,
  "history_end_time" : 1684267389196,
  "history_notes" : null,
  "history_process" : "2x5xrm",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "xof9prbpf6s",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389197,
  "history_end_time" : 1684267389197,
  "history_notes" : null,
  "history_process" : "n508da",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "w2tc05xdzy6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389197,
  "history_end_time" : 1684267389197,
  "history_notes" : null,
  "history_process" : "rdt0gy",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "3lalroukd1a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389197,
  "history_end_time" : 1684267389197,
  "history_notes" : null,
  "history_process" : "xdwq7e",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "2kyjth0p7rf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389197,
  "history_end_time" : 1684267389197,
  "history_notes" : null,
  "history_process" : "5yfzer",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "5yl3iluahi1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389197,
  "history_end_time" : 1684267389197,
  "history_notes" : null,
  "history_process" : "fsy61n",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "27q5zrwrtag",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389198,
  "history_end_time" : 1684267389198,
  "history_notes" : null,
  "history_process" : "sq4sw3",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "fr0sek0mm3u",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389198,
  "history_end_time" : 1684267389198,
  "history_notes" : null,
  "history_process" : "shce7j",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "0862dqxdf6p",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389198,
  "history_end_time" : 1684267389198,
  "history_notes" : null,
  "history_process" : "dhjb5i",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "kf75vwj26v6",
  "history_input" : "#predict eddies on testdataset\n\nfrom matplotlib.animation import ArtistAnimation\nfrom model_components import *\nfrom training_and_plot_utils  import *\nfrom device_config_and_data_loader import *\nimport os\nfrom fetch_data_utils import *\n\nprev_date, prev_month, prev_year = get_dates_with_delta(331)\n\ndata_root = os.path.join(os.path.expanduser(\"~\"), \"ML_test\")\n\nval_folder = os.path.join(data_root, \"cds_ssh_test_everyday_interval\")\n\nprev_date = int(prev_date)\nprev_month = int(prev_month)\nprev_year = int(prev_year)\n\nval_file = os.path.join(val_folder, f\"subset_pet_masks_with_adt_{prev_year:04d}{prev_month:02d}{prev_date:02d}_lat{lat_str}_lon{lon_str}.npz\")\n\nbinary = False\nnum_classes = 2 if binary else 3\n\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel.load_state_dict(torch.load(\"/home/chetana/tensorboard/2023-03-15_03-26/model_ckpt_68.pt\"))\nmodel.eval()\n\nwith torch.no_grad():\n    fig, ax = plt.subplots(1, 3, figsize=(25, 10))\n    artists = []\n    # loop through all SSH maps and eddy masks in 2019\n    # and run the model to generate predicted eddy masks\n    for n, (ssh_vars, seg_masks, date_indices) in enumerate(val_loader):\n        ssh_vars = ssh_vars.to(device)\n        seg_masks = seg_masks.to(device)\n        # Run the model to generate predictions\n        preds = model(ssh_vars)\n\n        # For each pixel, EddyNet outputs predictions in probabilities,\n        # so choose the channels (0, 1, or 2) with the highest prob.\n        preds = preds.argmax(dim=1)\n\n        # Loop through all SSH maps, eddy masks, and predicted masks\n        # in this minibatch and generate a video\n        preds = preds.cpu().numpy()\n        seg_masks = seg_masks.cpu().numpy()\n        ssh_vars = ssh_vars.cpu().numpy()\n        date_indices = date_indices.cpu().numpy()\n        for i in range(len(ssh_vars)):\n            date, img, mask, pred = date_indices[i], ssh_vars[i], seg_masks[i], preds[i]\n            img1, title1, img2, title2, img3, title3 = plot_eddies_on_axes(\n                date, img, mask, pred, ax[0], ax[1], ax[2]\n            )\n            artists.append([img1, title1, img2, title2, img3, title3])\n            fig.canvas.draw()\n            fig.canvas.flush_events()\n    animation = ArtistAnimation(fig, artists, interval=200, blit=True)\n    plt.close()\n\nprint(os.path.join(tensorboard_dir, \"test_predictions.gif\"))\nanimation.save(os.path.join(tensorboard_dir, \"test_predictions.gif\"), writer=\"pillow\")\n\n# HTML(animation.to_jshtml())\n\n#plot contour\n\np = preds[0].astype(np.uint8)\n\nprint(f\"Number of anticyclonic eddies: {count_eddies(p, eddy_type='anticyclonic')}\")\nprint(f\"Number of cyclonic eddies: {count_eddies(p, eddy_type='cyclonic')}\")\nprint(f\"Number of both eddies: {count_eddies(p, eddy_type='both')}\")\n\n# draw contours on the image\nthr = cv2.threshold(p, 0, 1, cv2.THRESH_BINARY)[1].astype(np.uint8)\ncontours, hierarchy = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\nimg = np.zeros(p.shape, np.uint8)\ncv2.drawContours(img, contours, -1, (255, 255, 255), 1)\nfileName = os.path.join(\"/home/chetana/plots/test/\",f\"{prev_year:04d}{prev_month:02d}{prev_date:02d}_contours.png\")\ncv2.imwrite(fileName, img)\nplt.imshow(img, cmap=\"gray\")\nplt.axis(\"off\")\n\n# get average contour area\narea = 0\n      \n      \nfor cnt in contours:\n    area += cv2.contourArea(cnt)\narea /= len(contours)\n      \n      \nprint(f\"Average contour area: {area:.2f} sq. pixels\")\n\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nRead 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nTotal number of pixels in training set: 0.39 megapixels across 24 SSH maps\nNumber of pixels that are not eddies: 0.28 megapixels (72.00%)\nNumber of pixels that are anticyclonic eddies: 0.06 megapixels (14.23%)\nNumber of pixels that are cyclonic eddies: 0.05 megapixels (13.77%)\n\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-05-16_20-03\n======================================================================\nTraceback (most recent call last):\n  File \"/home/chetana/gw-workspace/kf75vwj26v6/predict_on_test_data.py\", line 20, in <module>\n    val_file = os.path.join(val_folder, f\"subset_pet_masks_with_adt_{prev_year:04d}{prev_month:02d}{prev_date:02d}_lat{lat_str}_lon{lon_str}.npz\")\nNameError: name 'lat_str' is not defined\n",
  "history_begin_time" : 1684267389775,
  "history_end_time" : 1684267395636,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Failed"
},{
  "history_id" : "bhlbf7qtnj0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389200,
  "history_end_time" : 1684267389200,
  "history_notes" : null,
  "history_process" : "g7a3zf",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "wwbn33egn5x",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1684267389200,
  "history_end_time" : 1684267389200,
  "history_notes" : null,
  "history_process" : "wn1y5m",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "br3sj5gxdm9",
  "history_input" : "#Preprocessing for test files\n\nfrom compression_and_segmentation_utils import *\nfrom fetch_data_utils import *\n\n\nprev_date, prev_month, prev_year = get_dates_with_delta(331)\n\nlon_range = (-166, -134)\nlat_range = (14, 46)\n\ndata_root = os.path.join(os.path.expanduser(\"~\"), \"ML_test\")\n\ntest_folder = os.path.join(data_root, \"cds_ssh_test_everyday_interval\")\n\nfile_pattern = \"dt_global_twosat_phy_l4_{year:04d}{month:02d}{day:02d}_vDT2021.nc\"\n\nprint(\"testdate before:\", test_folder)\n\ntest_dates, test_files = get_dates_and_files(\n    [int(prev_year)], [int(prev_month)], [int(prev_date)], test_folder, file_pattern\n)\n\n\ntest_adt, test_adt_filtered, test_masks = generate_masks_in_parallel(\n    test_files, test_dates, test=True\n)\n\ntest_subset = subset_arrays_for_test(\n    test_masks,\n    test_adt,\n    test_adt_filtered,\n    test_dates,\n    lon_range,\n    lat_range,\n    plot=True,\n    resolution_deg=0.25,\n    save_folder=test_folder,\n    prev_date = int(prev_date),\n    prev_month= int(prev_month),\n    prev_year= int(prev_year)\n)\n\n",
  "history_output" : "testdate before: /home/chetana/ML_test/cds_ssh_test_everyday_interval\nFound 1 files for 2022.\n2023-05-16 20:03:13,345 WARNING We assume pixel position of grid is centered for /home/chetana/ML_test/cds_ssh_test_everyday_interval/dt_global_twosat_phy_l4_20220619_vDT2021.nc\n2023-05-16 20:03:13,387 WARNING No filtering above 85.000000 degrees of latitude\n2023-05-16 20:03:20,395 INFO We will apply on step a factor to be coherent with grid : 1.000000\n/home/chetana/anaconda3/envs/ranjan/lib/python3.10/site-packages/numpy/lib/function_base.py:4650: UserWarning: Warning: 'partition' will ignore the 'mask' of the MaskedArray.\n  arr.partition(\n2023-05-16 20:03:20,419 INFO Start computing iso lines\n2023-05-16 20:03:20,442 INFO Start computing iso lines with 343 levels from -0.850000 to 0.860000 ...\n2023-05-16 20:03:24,142 INFO 686 contours close over the bounds\n2023-05-16 20:03:24,142 INFO Finish computing iso lines\n2023-05-16 20:03:25,418 INFO Repair 12597 closed contours and 40 almost closed contours / 97678 contours\nSaved masks to /home/chetana/ML_eddies/cds_ssh_2019_10day_interval/global_pet_masks_with_adt_2022.npz\nSaved mask subset to /home/chetana/ML_test/cds_ssh_test_everyday_interval/subset_pet_masks_with_adt_20220619_lat14N-46N_lon166W-134W.npz\n",
  "history_begin_time" : 1684267389360,
  "history_end_time" : 1684267420204,
  "history_notes" : null,
  "history_process" : "ejp9sg",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
}]
