[{
  "history_id" : "r8kwkmlyytt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640521,
  "history_end_time" : 1682439640521,
  "history_notes" : null,
  "history_process" : "0ajbp0",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "18a5u78kv5b",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640522,
  "history_end_time" : 1682439640522,
  "history_notes" : null,
  "history_process" : "0ps7es",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "f0t8q6qtlf2",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640522,
  "history_end_time" : 1682439640522,
  "history_notes" : null,
  "history_process" : "ag4g86",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "fp8yyqie292",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640522,
  "history_end_time" : 1682439640522,
  "history_notes" : null,
  "history_process" : "nzlslh",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "vgr9d8phldz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640523,
  "history_end_time" : 1682439640523,
  "history_notes" : null,
  "history_process" : "jajowz",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "twlkplutawr",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640523,
  "history_end_time" : 1682439640523,
  "history_notes" : null,
  "history_process" : "zhsdwn",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "ypamo5u92kg",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640523,
  "history_end_time" : 1682439640523,
  "history_notes" : null,
  "history_process" : "dhjb5i",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "y0057u4e1mf",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640523,
  "history_end_time" : 1682439640523,
  "history_notes" : null,
  "history_process" : "zbt6sg",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "4tzu40h7x7r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640524,
  "history_end_time" : 1682439640524,
  "history_notes" : null,
  "history_process" : "g7a3zf",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "vlgd40c9s7a",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640524,
  "history_end_time" : 1682439640526,
  "history_notes" : null,
  "history_process" : "tcr60i",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "rwp5z00cxt4",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640527,
  "history_end_time" : 1682439640527,
  "history_notes" : null,
  "history_process" : "ejp9sg",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "u7btybeobaz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640527,
  "history_end_time" : 1682439640527,
  "history_notes" : null,
  "history_process" : "wn1y5m",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "9p67ea0a34r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640527,
  "history_end_time" : 1682439640527,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "xbokkb23eir",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640527,
  "history_end_time" : 1682439640527,
  "history_notes" : null,
  "history_process" : "znr9qa",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "rnbomyv44ct",
  "history_input" : "from training_and_plot_utils import *\nfrom model_components import *\nfrom device_config_and_data_loader import *\nfrom tqdm.auto import tqdm\n\n\n# create some aliases\nloss, opt, sched = loss_fn, optimizer, scheduler\n\ncheckpoint_path = os.path.join(tensorboard_dir, \"model_ckpt_{epoch}.pt\")\nearly_stopping = EarlyStopping(\n    patience=10,\n    path=checkpoint_path,\n    min_epochs=30,\n)\n\nprogress_bar = tqdm(range(num_epochs), desc=\"Training: \", unit=\"epoch(s)\")\nfor N in progress_bar:\n    train_loss, val_loss, train_m, val_m = run_epoch(\n        N,\n        model,\n        loss,\n        opt,\n        sched,\n        train_loader,\n        val_loader,\n        train_metrics,\n        val_metrics,\n        writer,\n    )\n\n    # update progress bar\n    train_m_copy = {f\"train_{k}\".lower(): v.cpu().numpy() for k, v in train_m.items()}\n    val_m_copy = {f\"val_{k}\".lower(): v.cpu().numpy() for k, v in val_m.items()}\n    progress_bar.set_postfix(**train_m_copy, **val_m_copy)\n\n    # early stopping when validation loss stops improving\n    early_stopping.path = checkpoint_path.format(epoch=N)\n    early_stopping(val_loss, model)\n    if early_stopping.early_stop:\n        print(\n            f\"Early stopping at epoch {N}\"\n            f\" with validation loss {val_loss:.3f}\"\n            f\" and training loss {train_loss:.3f}\"\n        )\n        break\n\n    # TODO (homework): save checkpoint every 10 epochs\n\n# add hyperparameters and corresponding results to tensorboard HParams table\nhparam_dict = {\n    \"backbone\": model_name,\n    \"num_epochs\": num_epochs,\n    \"batch_size\": batch_size,\n    \"num_classes\": num_classes,\n    \"binary_mask\": binary,\n    \"optimizer\": optimizer.__class__.__name__,\n    \"max_lr\": max_lr,\n    \"loss_function\": loss_fn.__class__.__name__,\n}\nprint(train_m)\nmetrics_dict = {\n    \"train/end_epoch\": N,\n    \"train/loss\": train_loss,\n    \"train/Accuracy\": train_m[\"MulticlassAccuracy\"],\n    \"val/loss\": val_loss,\n    \"val/Accuracy\": val_m[\"MulticlassAccuracy\"],\n}\nadd_hparams(writer, hparam_dict, metrics_dict, epoch_num=N)\nwriter.close()\n\n# save model to tensorboard folder\nmodel_path = os.path.join(tensorboard_dir, f\"model_ckpt_final_full_data.pt\")\n\nprint(model_path)\n\n\nprint(\"train/Accuracy\", train_m[\"MulticlassAccuracy\"])\nprint(\"val/Accuracy\", val_m[\"MulticlassAccuracy\"])\ntorch.save(model.state_dict(), model_path)",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nRead 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nTotal number of pixels in training set: 0.39 megapixels across 24 SSH maps\nNumber of pixels that are not eddies: 0.28 megapixels (72.00%)\nNumber of pixels that are anticyclonic eddies: 0.06 megapixels (14.23%)\nNumber of pixels that are cyclonic eddies: 0.05 megapixels (13.77%)\n\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-04-25_16-20\n======================================================================\n\nTraining:   0%|                                   | 0/250 [00:00<?, ?epoch(s)/s]\nTraining:   0%| | 0/250 [00:05<?, ?epoch(s)/s, train_multiclassaccuracy=0.239357\nTraining:   0%| | 1/250 [00:05<23:29,  5.66s/epoch(s), train_multiclassaccuracy=\nTraining:   0%| | 1/250 [00:10<23:29,  5.66s/epoch(s), train_multiclassaccuracy=\nTraining:   1%| | 2/250 [00:10<22:01,  5.33s/epoch(s), train_multiclassaccuracy=\nTraining:   1%| | 2/250 [00:15<22:01,  5.33s/epoch(s), train_multiclassaccuracy=\nTraining:   1%| | 3/250 [00:15<21:36,  5.25s/epoch(s), train_multiclassaccuracy=\nTraining:   1%| | 3/250 [00:20<21:36,  5.25s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 4/250 [00:20<20:58,  5.11s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 4/250 [00:25<20:58,  5.11s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 5/250 [00:25<20:50,  5.10s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 5/250 [00:30<20:50,  5.10s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 6/250 [00:30<20:28,  5.04s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 6/250 [00:35<20:28,  5.04s/epoch(s), train_multiclassaccuracy=\nTraining:   3%| | 7/250 [00:35<20:35,  5.09s/epoch(s), train_multiclassaccuracy=\nTraining:   3%| | 7/250 [00:41<20:35,  5.09s/epoch(s), train_multiclassaccuracy=\nTraining:   3%| | 8/250 [00:41<20:36,  5.11s/epoch(s), train_multiclassaccuracy=\nTraining:   3%| | 8/250 [00:46<20:36,  5.11s/epoch(s), train_multiclassaccuracy=\nTraining:   4%| | 9/250 [00:46<20:20,  5.06s/epoch(s), train_multiclassaccuracy=\nTraining:   4%| | 9/250 [00:51<20:20,  5.06s/epoch(s), train_multiclassaccuracy=\nTraining:   4%| | 10/250 [00:51<20:25,  5.11s/epoch(s), train_multiclassaccuracy\nTraining:   4%| | 10/250 [00:56<20:25,  5.11s/epoch(s), train_multiclassaccuracy\nTraining:   4%| | 11/250 [00:56<20:08,  5.06s/epoch(s), train_multiclassaccuracy\nTraining:   4%| | 11/250 [01:01<20:08,  5.06s/epoch(s), train_multiclassaccuracy\nTraining:   5%| | 12/250 [01:01<19:55,  5.02s/epoch(s), train_multiclassaccuracy\nTraining:   5%| | 12/250 [01:05<19:55,  5.02s/epoch(s), train_multiclassaccuracy\nTraining:   5%| | 13/250 [01:05<19:33,  4.95s/epoch(s), train_multiclassaccuracy\nTraining:   5%| | 13/250 [01:10<19:33,  4.95s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 14/250 [01:10<19:28,  4.95s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 14/250 [01:15<19:28,  4.95s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 15/250 [01:15<19:12,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 15/250 [01:20<19:12,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 16/250 [01:20<19:10,  4.92s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 16/250 [01:25<19:10,  4.92s/epoch(s), train_multiclassaccuracy\nTraining:   7%| | 17/250 [01:25<18:57,  4.88s/epoch(s), train_multiclassaccuracy\nTraining:   7%| | 17/250 [01:30<18:57,  4.88s/epoch(s), train_multiclassaccuracy\nTraining:   7%| | 18/250 [01:30<18:55,  4.89s/epoch(s), train_multiclassaccuracy\nTraining:   7%| | 18/250 [01:35<18:55,  4.89s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 19/250 [01:35<18:55,  4.92s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 19/250 [01:40<18:55,  4.92s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 20/250 [01:40<18:38,  4.86s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 20/250 [01:45<18:38,  4.86s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 21/250 [01:45<18:41,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 21/250 [01:49<18:41,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:   9%| | 22/250 [01:49<18:29,  4.87s/epoch(s), train_multiclassaccuracy\nTraining:   9%| | 22/250 [01:54<18:29,  4.87s/epoch(s), train_multiclassaccuracy\nTraining:   9%| | 23/250 [01:54<18:30,  4.89s/epoch(s), train_multiclassaccuracy\nTraining:   9%| | 23/250 [01:59<18:30,  4.89s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 24/250 [01:59<18:16,  4.85s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 24/250 [02:04<18:16,  4.85s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 25/250 [02:04<18:17,  4.88s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 25/250 [02:09<18:17,  4.88s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 26/250 [02:09<18:16,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 26/250 [02:14<18:16,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:  11%| | 27/250 [02:14<18:13,  4.91s/epoch(s), train_multiclassaccuracy\nTraining:  11%| | 27/250 [02:19<18:13,  4.91s/epoch(s), train_multiclassaccuracy\nTraining:  11%| | 28/250 [02:19<18:00,  4.87s/epoch(s), train_multiclassaccuracy\nTraining:  11%| | 28/250 [02:24<18:00,  4.87s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 29/250 [02:24<17:56,  4.87s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 29/250 [02:28<17:56,  4.87s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 30/250 [02:29<17:55,  4.89s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 30/250 [02:33<17:55,  4.89s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 31/250 [02:33<17:46,  4.87s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 31/250 [02:39<17:46,  4.87s/epoch(s), train_multiclassaccuracy\nTraining:  13%|▏| 32/250 [02:39<18:06,  4.99s/epoch(s), train_multiclassaccuracy\nTraining:  13%|▏| 32/250 [02:43<18:06,  4.99s/epoch(s), train_multiclassaccuracy\nTraining:  13%|▏| 33/250 [02:43<17:45,  4.91s/epoch(s), train_multiclassaccuracy\nTraining:  13%|▏| 33/250 [02:48<17:45,  4.91s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 34/250 [02:48<17:39,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 34/250 [02:53<17:39,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 35/250 [02:53<17:28,  4.88s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 35/250 [02:58<17:28,  4.88s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 36/250 [02:58<17:26,  4.89s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 36/250 [03:03<17:26,  4.89s/epoch(s), train_multiclassaccuracy\nTraining:  15%|▏| 37/250 [03:03<17:11,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  15%|▏| 37/250 [03:08<17:11,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  15%|▏| 38/250 [03:08<17:10,  4.86s/epoch(s), train_multiclassaccuracy\nTraining:  15%|▏| 38/250 [03:12<17:10,  4.86s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 39/250 [03:12<17:03,  4.85s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 39/250 [03:17<17:03,  4.85s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 40/250 [03:17<17:08,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 40/250 [03:23<17:08,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 41/250 [03:23<17:28,  5.02s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 41/250 [03:28<17:28,  5.02s/epoch(s), train_multiclassaccuracy\nTraining:  17%|▏| 42/250 [03:28<17:18,  4.99s/epoch(s), train_multiclassaccuracy\nTraining:  17%|▏| 42/250 [03:33<17:18,  4.99s/epoch(s), train_multiclassaccuracy\nTraining:  17%|▏| 43/250 [03:33<17:22,  5.04s/epoch(s), train_multiclassaccuracy\nTraining:  17%|▏| 43/250 [03:38<17:22,  5.04s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 44/250 [03:38<17:00,  4.95s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 44/250 [03:42<17:00,  4.95s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 45/250 [03:42<16:54,  4.95s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 45/250 [03:47<16:54,  4.95s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 46/250 [03:47<16:39,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 46/250 [03:52<16:39,  4.90s/epoch(s), train_multiclassaccuracy\nTraining:  19%|▏| 47/250 [03:52<16:35,  4.91s/epoch(s), train_multiclassaccuracy\nTraining:  19%|▏| 47/250 [03:57<16:35,  4.91s/epoch(s), train_multiclassaccuracy\nTraining:  19%|▏| 48/250 [03:57<16:21,  4.86s/epoch(s), train_multiclassaccuracy\nTraining:  19%|▏| 48/250 [04:02<16:21,  4.86s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 49/250 [04:02<16:20,  4.88s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 49/250 [04:07<16:20,  4.88s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 50/250 [04:07<16:07,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 50/250 [04:11<16:07,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 51/250 [04:12<16:07,  4.86s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 51/250 [04:16<16:07,  4.86s/epoch(s), train_multiclassaccuracy\nTraining:  21%|▏| 52/250 [04:16<15:55,  4.83s/epoch(s), train_multiclassaccuracy\nTraining:  21%|▏| 52/250 [04:21<15:55,  4.83s/epoch(s), train_multiclassaccuracy\nTraining:  21%|▏| 53/250 [04:21<15:55,  4.85s/epoch(s), train_multiclassaccuracy\nTraining:  21%|▏| 53/250 [04:26<15:55,  4.85s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 54/250 [04:26<15:43,  4.81s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 54/250 [04:31<15:43,  4.81s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 55/250 [04:31<15:44,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 55/250 [04:36<15:44,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 56/250 [04:36<15:33,  4.81s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 56/250 [04:40<15:33,  4.81s/epoch(s), train_multiclassaccuracy\nTraining:  23%|▏| 57/250 [04:40<15:34,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  23%|▏| 57/250 [04:45<15:34,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  23%|▏| 58/250 [04:45<15:22,  4.81s/epoch(s), train_multiclassaccuracy\nTraining:  23%|▏| 58/250 [04:50<15:22,  4.81s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 59/250 [04:50<15:24,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 59/250 [04:55<15:24,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 60/250 [04:55<15:13,  4.81s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 60/250 [05:00<15:13,  4.81s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 61/250 [05:00<15:13,  4.83s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 61/250 [05:04<15:13,  4.83s/epoch(s), train_multiclassaccuracy\nTraining:  25%|▏| 62/250 [05:04<15:02,  4.80s/epoch(s), train_multiclassaccuracy\nTraining:  25%|▏| 62/250 [05:09<15:02,  4.80s/epoch(s), train_multiclassaccuracy\nTraining:  25%|▎| 63/250 [05:09<15:02,  4.83s/epoch(s), train_multiclassaccuracy\nTraining:  25%|▎| 63/250 [05:14<15:02,  4.83s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 64/250 [05:14<15:01,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 64/250 [05:19<15:01,  4.84s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 65/250 [05:19<14:52,  4.82s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 65/250 [05:24<14:52,  4.82s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 66/250 [05:24<14:58,  4.88s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 66/250 [05:29<14:58,  4.88s/epoch(s), train_multiclassaccuracyEarly stopping at epoch 66 with validation loss 0.000 and training loss 1.006\n\nTraining:  26%|▎| 66/250 [05:29<15:17,  4.99s/epoch(s), train_multiclassaccuracy\n{'MulticlassAccuracy': tensor(0.6333)}\n/home/chetana/tensorboard/2023-04-25_16-20/model_ckpt_final_full_data.pt\ntrain/Accuracy tensor(0.6333)\nval/Accuracy tensor(0.7205)\n",
  "history_begin_time" : 1682439651059,
  "history_end_time" : 1682439985918,
  "history_notes" : null,
  "history_process" : "2x5xrm",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "fgdehoiq6gl",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640530,
  "history_end_time" : 1682439640530,
  "history_notes" : null,
  "history_process" : "n508da",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "j1w1sbvu4ba",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640530,
  "history_end_time" : 1682439640530,
  "history_notes" : null,
  "history_process" : "rdt0gy",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "cdnvjyt1gog",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640531,
  "history_end_time" : 1682439640531,
  "history_notes" : null,
  "history_process" : "xdwq7e",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "bgfm4am2n8h",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640531,
  "history_end_time" : 1682439640531,
  "history_notes" : null,
  "history_process" : "5yfzer",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "d9a3xcsgo75",
  "history_input" : "# Pytorch DataLoader\n\nimport numpy as np\nfrom dependency import os\nfrom device_config_and_data_loader import *\nfrom convert_to_pytorch_data_loader import *\n\n\n# link npz files\n\ndata_root = os.path.join(os.path.expanduser(\"~\"), \"ML_eddie\")\ntrain_folder = os.path.join(data_root, \"cds_ssh_1998-2018_10day_interval\")\nval_folder = os.path.join(data_root, \"cds_ssh_2019_10day_interval\")\ntrain_file = os.path.join(train_folder, \"subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz\")\nval_file = os.path.join(val_folder, \"subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz\")\n\n\n# Data Loader\n# set binary = false if we want to distinguish between cyclonic and anticyclonic\n\nbinary = False\nnum_classes = 2 if binary else 3\ntrain_loader, _ = get_eddy_dataloader(train_file, binary=binary, batch_size=batch_size)\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\n\n# Class Distribution check\ntrain_masks = train_loader.dataset.masks.copy()\nclass_frequency = np.bincount(train_masks.flatten())\ntotal_pixels = sum(class_frequency)\n\n\nprint(\n    f\"Total number of pixels in training set: {total_pixels/1e6:.2f} megapixels\"\n    f\" across {len(train_masks)} SSH maps\\\\n\"\n    f\"Number of pixels that are not eddies: {class_frequency[0]/1e6:.2f} megapixels \"\n    f\"({class_frequency[0]/total_pixels * 100:.2f}%)\\\\n\"\n    f\"Number of pixels that are anticyclonic eddies: {class_frequency[1]/1e6:.2f} megapixels \"\n    f\"({class_frequency[1]/total_pixels * 100:.2f}%)\\\\n\"\n    f\"Number of pixels that are cyclonic eddies: {class_frequency[2]/1e6:.2f} megapixels \"\n    f\"({class_frequency[2]/total_pixels * 100:.2f}%)\\\\n\"\n)\n\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nRead 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nTotal number of pixels in training set: 0.39 megapixels across 24 SSH maps\nNumber of pixels that are not eddies: 0.28 megapixels (72.00%)\nNumber of pixels that are anticyclonic eddies: 0.06 megapixels (14.23%)\nNumber of pixels that are cyclonic eddies: 0.05 megapixels (13.77%)\n\n",
  "history_begin_time" : 1682439645531,
  "history_end_time" : 1682439650668,
  "history_notes" : null,
  "history_process" : "fsy61n",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "xnpcg03tnx5",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682439640533,
  "history_end_time" : 1682439640533,
  "history_notes" : null,
  "history_process" : "sq4sw3",
  "host_id" : "c2lqcn",
  "indicator" : "Skipped"
},{
  "history_id" : "ks7st1ahxaw",
  "history_input" : "#  Generate compress segmentaiton mask\n\nimport logging\n\nfrom compression_and_segmentation_utils import *\n\nfrom data_loader import *\n\n\n# Generate segmentaion mask\n\nlogging.getLogger(\"pet\").setLevel(logging.ERROR)\n\n# enter the AVISO filename pattern\n# year, month, and day in file_pattern will be filled in get_dates_and_files:\nfile_pattern = \"dt_global_twosat_phy_l4_{year:04d}{month:02d}{day:02d}_vDT2021.nc\"\n\n# training set: 1998 - 2018\ntrain_dates, train_files = get_dates_and_files(\n    range(1998, 2019), range(1, 13), [1, 10, 20, 30], train_folder, file_pattern\n)\ntrain_adt, train_adt_filtered, train_masks = generate_masks_in_parallel(\n    train_files, train_dates\n)\n\n\n# test set: 2019\ntest_dates, test_files = get_dates_and_files(\n    [2019], range(1, 13), [1, 10, 20, 30], test_folder, file_pattern\n)\ntest_adt, test_adt_filtered, test_masks = generate_masks_in_parallel(\n    test_files, test_dates\n)\n\n# copress Segmentaion masks to npz files\nlon_range = (-166, -134)\nlat_range = (14, 46)\n\ntrain_subset = subset_arrays(\n    train_masks,\n    train_adt,\n    train_adt_filtered,\n    train_dates,\n    lon_range,\n    lat_range,\n    plot=False,\n    resolution_deg=0.25,\n    save_folder=train_folder,\n)\n\ntest_subset = subset_arrays(\n    test_masks,\n    test_adt,\n    test_adt_filtered,\n    test_dates,\n    lon_range,\n    lat_range,\n    plot=True,\n    resolution_deg=0.25,\n    save_folder=test_folder,\n)\n\n# compress segmask\nlon_range = (-166, -134)\nlat_range = (14, 46)\n\ntrain_subset = subset_arrays(\n    train_masks,\n    train_adt,\n    train_adt_filtered,\n    train_dates,\n    lon_range,\n    lat_range,\n    plot=False,\n    resolution_deg=0.25,\n    save_folder=train_folder,\n)\n\ntest_subset = subset_arrays(\n    test_masks,\n    test_adt,\n    test_adt_filtered,\n    test_dates,\n    lon_range,\n    lat_range,\n    plot=True,\n    resolution_deg=0.25,\n    save_folder=test_folder,\n)",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/ks7st1ahxaw/preprocessing_and_compression.py\", line 19, in <module>\n    train_dates, train_files = get_dates_and_files(\n  File \"/home/chetana/gw-workspace/ks7st1ahxaw/compression_and_segmentation_utils.py\", line 90, in get_dates_and_files\n    date = datetime(y, m, d)\nTypeError: 'module' object is not callable\n",
  "history_begin_time" : 1682439640908,
  "history_end_time" : 1682439645030,
  "history_notes" : null,
  "history_process" : "shce7j",
  "host_id" : "c2lqcn",
  "indicator" : "Failed"
}]
