[{
  "history_id" : "9e96oknkxv0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181467,
  "history_end_time" : 1682440234532,
  "history_notes" : null,
  "history_process" : "0ajbp0",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "a4h7sucqrq1",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181467,
  "history_end_time" : 1682440234533,
  "history_notes" : null,
  "history_process" : "0ps7es",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "shzaj98yubt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181468,
  "history_end_time" : 1682440234534,
  "history_notes" : null,
  "history_process" : "ag4g86",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "fkr918inxno",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181468,
  "history_end_time" : 1682440234535,
  "history_notes" : null,
  "history_process" : "nzlslh",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "4lpbzadzroz",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181468,
  "history_end_time" : 1682440234536,
  "history_notes" : null,
  "history_process" : "jajowz",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "tprjw16twma",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181468,
  "history_end_time" : 1682440234537,
  "history_notes" : null,
  "history_process" : "zhsdwn",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "cos11fm4p0l",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181469,
  "history_end_time" : 1682440234538,
  "history_notes" : null,
  "history_process" : "dhjb5i",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "as4v920o8m7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181469,
  "history_end_time" : 1682440234538,
  "history_notes" : null,
  "history_process" : "zbt6sg",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "arm20p78cek",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181469,
  "history_end_time" : 1682440234538,
  "history_notes" : null,
  "history_process" : "g7a3zf",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "kvfdkfa0lf0",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181470,
  "history_end_time" : 1682440234539,
  "history_notes" : null,
  "history_process" : "tcr60i",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "sn6jq8fsbs7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181470,
  "history_end_time" : 1682440234539,
  "history_notes" : null,
  "history_process" : "ejp9sg",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "xifogy8oquh",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181470,
  "history_end_time" : 1682440234539,
  "history_notes" : null,
  "history_process" : "wn1y5m",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "zby3o7pso4r",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181470,
  "history_end_time" : 1682440234540,
  "history_notes" : null,
  "history_process" : "f6bwfv",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "icxfu8fh2h6",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181471,
  "history_end_time" : 1682440234540,
  "history_notes" : null,
  "history_process" : "znr9qa",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "j3cvqsjt97j",
  "history_input" : "from training_and_plot_utils import *\nfrom model_components import *\nfrom device_config_and_data_loader import *\nfrom tqdm.auto import tqdm\n\n\n# create some aliases\nloss, opt, sched = loss_fn, optimizer, scheduler\n\ncheckpoint_path = os.path.join(tensorboard_dir, \"model_ckpt_{epoch}.pt\")\nearly_stopping = EarlyStopping(\n    patience=10,\n    path=checkpoint_path,\n    min_epochs=30,\n)\n\nprogress_bar = tqdm(range(num_epochs), desc=\"Training: \", unit=\"epoch(s)\")\nfor N in progress_bar:\n    train_loss, val_loss, train_m, val_m = run_epoch(\n        N,\n        model,\n        loss,\n        opt,\n        sched,\n        train_loader,\n        val_loader,\n        train_metrics,\n        val_metrics,\n        writer,\n    )\n\n    # update progress bar\n    train_m_copy = {f\"train_{k}\".lower(): v.cpu().numpy() for k, v in train_m.items()}\n    val_m_copy = {f\"val_{k}\".lower(): v.cpu().numpy() for k, v in val_m.items()}\n    progress_bar.set_postfix(**train_m_copy, **val_m_copy)\n\n    # early stopping when validation loss stops improving\n    early_stopping.path = checkpoint_path.format(epoch=N)\n    early_stopping(val_loss, model)\n    if early_stopping.early_stop:\n        print(\n            f\"Early stopping at epoch {N}\"\n            f\" with validation loss {val_loss:.3f}\"\n            f\" and training loss {train_loss:.3f}\"\n        )\n        break\n\n    # TODO (homework): save checkpoint every 10 epochs\n\n# add hyperparameters and corresponding results to tensorboard HParams table\nhparam_dict = {\n    \"backbone\": model_name,\n    \"num_epochs\": num_epochs,\n    \"batch_size\": batch_size,\n    \"num_classes\": num_classes,\n    \"binary_mask\": binary,\n    \"optimizer\": optimizer.__class__.__name__,\n    \"max_lr\": max_lr,\n    \"loss_function\": loss_fn.__class__.__name__,\n}\nprint(train_m)\nmetrics_dict = {\n    \"train/end_epoch\": N,\n    \"train/loss\": train_loss,\n    \"train/Accuracy\": train_m[\"MulticlassAccuracy\"],\n    \"val/loss\": val_loss,\n    \"val/Accuracy\": val_m[\"MulticlassAccuracy\"],\n}\nadd_hparams(writer, hparam_dict, metrics_dict, epoch_num=N)\nwriter.close()\n\n# save model to tensorboard folder\nmodel_path = os.path.join(tensorboard_dir, f\"model_ckpt_final_full_data.pt\")\n\nprint(model_path)\n\n\nprint(\"train/Accuracy\", train_m[\"MulticlassAccuracy\"])\nprint(\"val/Accuracy\", val_m[\"MulticlassAccuracy\"])\ntorch.save(model.state_dict(), model_path)",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nRead 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nTotal number of pixels in training set: 0.39 megapixels across 24 SSH maps\nNumber of pixels that are not eddies: 0.28 megapixels (72.00%)\nNumber of pixels that are anticyclonic eddies: 0.06 megapixels (14.23%)\nNumber of pixels that are cyclonic eddies: 0.05 megapixels (13.77%)\n\n======================================================================\nWriting Tensorboard logs to /home/chetana/tensorboard/2023-04-25_16-29\n======================================================================\n\nTraining:   0%|                                   | 0/250 [00:00<?, ?epoch(s)/s]\nTraining:   0%| | 0/250 [00:05<?, ?epoch(s)/s, train_multiclassaccuracy=0.239357\nTraining:   0%| | 1/250 [00:05<24:03,  5.80s/epoch(s), train_multiclassaccuracy=\nTraining:   0%| | 1/250 [00:14<24:03,  5.80s/epoch(s), train_multiclassaccuracy=\nTraining:   1%| | 2/250 [00:14<30:19,  7.34s/epoch(s), train_multiclassaccuracy=\nTraining:   1%| | 2/250 [00:27<30:19,  7.34s/epoch(s), train_multiclassaccuracy=\nTraining:   1%| | 3/250 [00:27<41:41, 10.13s/epoch(s), train_multiclassaccuracy=\nTraining:   1%| | 3/250 [00:41<41:41, 10.13s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 4/250 [00:41<47:21, 11.55s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 4/250 [00:59<47:21, 11.55s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 5/250 [00:59<56:13, 13.77s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 5/250 [01:18<56:13, 13.77s/epoch(s), train_multiclassaccuracy=\nTraining:   2%| | 6/250 [01:18<1:04:06, 15.76s/epoch(s), train_multiclassaccurac\nTraining:   2%| | 6/250 [01:33<1:04:06, 15.76s/epoch(s), train_multiclassaccurac\nTraining:   3%| | 7/250 [01:33<1:02:51, 15.52s/epoch(s), train_multiclassaccurac\nTraining:   3%| | 7/250 [01:44<1:02:51, 15.52s/epoch(s), train_multiclassaccurac\nTraining:   3%| | 8/250 [01:44<56:25, 13.99s/epoch(s), train_multiclassaccuracy=\nTraining:   3%| | 8/250 [01:56<56:25, 13.99s/epoch(s), train_multiclassaccuracy=\nTraining:   4%| | 9/250 [01:56<54:10, 13.49s/epoch(s), train_multiclassaccuracy=\nTraining:   4%| | 9/250 [02:09<54:10, 13.49s/epoch(s), train_multiclassaccuracy=\nTraining:   4%| | 10/250 [02:09<52:41, 13.17s/epoch(s), train_multiclassaccuracy\nTraining:   4%| | 10/250 [02:15<52:41, 13.17s/epoch(s), train_multiclassaccuracy\nTraining:   4%| | 11/250 [02:15<44:20, 11.13s/epoch(s), train_multiclassaccuracy\nTraining:   4%| | 11/250 [02:21<44:20, 11.13s/epoch(s), train_multiclassaccuracy\nTraining:   5%| | 12/250 [02:21<37:02,  9.34s/epoch(s), train_multiclassaccuracy\nTraining:   5%| | 12/250 [02:26<37:02,  9.34s/epoch(s), train_multiclassaccuracy\nTraining:   5%| | 13/250 [02:26<31:51,  8.06s/epoch(s), train_multiclassaccuracy\nTraining:   5%| | 13/250 [02:31<31:51,  8.06s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 14/250 [02:31<28:39,  7.29s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 14/250 [02:37<28:39,  7.29s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 15/250 [02:37<26:22,  6.73s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 15/250 [02:42<26:22,  6.73s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 16/250 [02:42<24:41,  6.33s/epoch(s), train_multiclassaccuracy\nTraining:   6%| | 16/250 [02:47<24:41,  6.33s/epoch(s), train_multiclassaccuracy\nTraining:   7%| | 17/250 [02:47<23:11,  5.97s/epoch(s), train_multiclassaccuracy\nTraining:   7%| | 17/250 [02:53<23:11,  5.97s/epoch(s), train_multiclassaccuracy\nTraining:   7%| | 18/250 [02:53<23:09,  5.99s/epoch(s), train_multiclassaccuracy\nTraining:   7%| | 18/250 [02:58<23:09,  5.99s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 19/250 [02:58<22:12,  5.77s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 19/250 [03:04<22:12,  5.77s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 20/250 [03:04<21:28,  5.60s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 20/250 [03:09<21:28,  5.60s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 21/250 [03:09<20:54,  5.48s/epoch(s), train_multiclassaccuracy\nTraining:   8%| | 21/250 [03:14<20:54,  5.48s/epoch(s), train_multiclassaccuracy\nTraining:   9%| | 22/250 [03:14<20:49,  5.48s/epoch(s), train_multiclassaccuracy\nTraining:   9%| | 22/250 [03:21<20:49,  5.48s/epoch(s), train_multiclassaccuracy\nTraining:   9%| | 23/250 [03:21<21:33,  5.70s/epoch(s), train_multiclassaccuracy\nTraining:   9%| | 23/250 [03:28<21:33,  5.70s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 24/250 [03:28<23:07,  6.14s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 24/250 [03:34<23:07,  6.14s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 25/250 [03:35<23:47,  6.35s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 25/250 [03:48<23:47,  6.35s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 26/250 [03:48<31:58,  8.56s/epoch(s), train_multiclassaccuracy\nTraining:  10%| | 26/250 [04:03<31:58,  8.56s/epoch(s), train_multiclassaccuracy\nTraining:  11%| | 27/250 [04:03<38:53, 10.46s/epoch(s), train_multiclassaccuracy\nTraining:  11%| | 27/250 [04:10<38:53, 10.46s/epoch(s), train_multiclassaccuracy\nTraining:  11%| | 28/250 [04:10<34:45,  9.39s/epoch(s), train_multiclassaccuracy\nTraining:  11%| | 28/250 [04:17<34:45,  9.39s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 29/250 [04:17<31:46,  8.63s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 29/250 [04:25<31:46,  8.63s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 30/250 [04:25<31:30,  8.59s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 30/250 [04:32<31:30,  8.59s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 31/250 [04:32<28:44,  7.87s/epoch(s), train_multiclassaccuracy\nTraining:  12%| | 31/250 [04:38<28:44,  7.87s/epoch(s), train_multiclassaccuracy\nTraining:  13%|▏| 32/250 [04:38<27:00,  7.43s/epoch(s), train_multiclassaccuracy\nTraining:  13%|▏| 32/250 [04:45<27:00,  7.43s/epoch(s), train_multiclassaccuracy\nTraining:  13%|▏| 33/250 [04:45<25:55,  7.17s/epoch(s), train_multiclassaccuracy\nTraining:  13%|▏| 33/250 [04:56<25:55,  7.17s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 34/250 [04:56<30:37,  8.51s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 34/250 [05:02<30:37,  8.51s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 35/250 [05:02<27:54,  7.79s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 35/250 [05:09<27:54,  7.79s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 36/250 [05:09<26:07,  7.32s/epoch(s), train_multiclassaccuracy\nTraining:  14%|▏| 36/250 [05:15<26:07,  7.32s/epoch(s), train_multiclassaccuracy\nTraining:  15%|▏| 37/250 [05:15<24:56,  7.03s/epoch(s), train_multiclassaccuracy\nTraining:  15%|▏| 37/250 [05:22<24:56,  7.03s/epoch(s), train_multiclassaccuracy\nTraining:  15%|▏| 38/250 [05:22<24:47,  7.02s/epoch(s), train_multiclassaccuracy\nTraining:  15%|▏| 38/250 [05:28<24:47,  7.02s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 39/250 [05:28<24:05,  6.85s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 39/250 [05:35<24:05,  6.85s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 40/250 [05:35<23:37,  6.75s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 40/250 [05:41<23:37,  6.75s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 41/250 [05:41<23:20,  6.70s/epoch(s), train_multiclassaccuracy\nTraining:  16%|▏| 41/250 [05:48<23:20,  6.70s/epoch(s), train_multiclassaccuracy\nTraining:  17%|▏| 42/250 [05:48<22:45,  6.57s/epoch(s), train_multiclassaccuracy\nTraining:  17%|▏| 42/250 [05:54<22:45,  6.57s/epoch(s), train_multiclassaccuracy\nTraining:  17%|▏| 43/250 [05:54<22:45,  6.60s/epoch(s), train_multiclassaccuracy\nTraining:  17%|▏| 43/250 [06:01<22:45,  6.60s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 44/250 [06:01<22:49,  6.65s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 44/250 [06:08<22:49,  6.65s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 45/250 [06:08<22:43,  6.65s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 45/250 [06:14<22:43,  6.65s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 46/250 [06:14<22:20,  6.57s/epoch(s), train_multiclassaccuracy\nTraining:  18%|▏| 46/250 [06:21<22:20,  6.57s/epoch(s), train_multiclassaccuracy\nTraining:  19%|▏| 47/250 [06:21<22:33,  6.67s/epoch(s), train_multiclassaccuracy\nTraining:  19%|▏| 47/250 [06:27<22:33,  6.67s/epoch(s), train_multiclassaccuracy\nTraining:  19%|▏| 48/250 [06:27<22:10,  6.59s/epoch(s), train_multiclassaccuracy\nTraining:  19%|▏| 48/250 [06:34<22:10,  6.59s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 49/250 [06:34<22:17,  6.65s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 49/250 [06:41<22:17,  6.65s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 50/250 [06:41<22:01,  6.61s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 50/250 [06:50<22:01,  6.61s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 51/250 [06:50<24:25,  7.37s/epoch(s), train_multiclassaccuracy\nTraining:  20%|▏| 51/250 [06:56<24:25,  7.37s/epoch(s), train_multiclassaccuracy\nTraining:  21%|▏| 52/250 [06:56<23:00,  6.97s/epoch(s), train_multiclassaccuracy\nTraining:  21%|▏| 52/250 [07:02<23:00,  6.97s/epoch(s), train_multiclassaccuracy\nTraining:  21%|▏| 53/250 [07:02<22:21,  6.81s/epoch(s), train_multiclassaccuracy\nTraining:  21%|▏| 53/250 [07:09<22:21,  6.81s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 54/250 [07:09<21:54,  6.70s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 54/250 [07:15<21:54,  6.70s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 55/250 [07:15<21:41,  6.68s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 55/250 [07:22<21:41,  6.68s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 56/250 [07:22<21:04,  6.52s/epoch(s), train_multiclassaccuracy\nTraining:  22%|▏| 56/250 [07:28<21:04,  6.52s/epoch(s), train_multiclassaccuracy\nTraining:  23%|▏| 57/250 [07:28<20:44,  6.45s/epoch(s), train_multiclassaccuracy\nTraining:  23%|▏| 57/250 [07:34<20:44,  6.45s/epoch(s), train_multiclassaccuracy\nTraining:  23%|▏| 58/250 [07:34<20:22,  6.37s/epoch(s), train_multiclassaccuracy\nTraining:  23%|▏| 58/250 [07:41<20:22,  6.37s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 59/250 [07:41<20:34,  6.47s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 59/250 [07:47<20:34,  6.47s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 60/250 [07:47<20:28,  6.47s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 60/250 [07:54<20:28,  6.47s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 61/250 [07:54<20:25,  6.48s/epoch(s), train_multiclassaccuracy\nTraining:  24%|▏| 61/250 [08:00<20:25,  6.48s/epoch(s), train_multiclassaccuracy\nTraining:  25%|▏| 62/250 [08:00<19:56,  6.37s/epoch(s), train_multiclassaccuracy\nTraining:  25%|▏| 62/250 [08:05<19:56,  6.37s/epoch(s), train_multiclassaccuracy\nTraining:  25%|▎| 63/250 [08:05<18:48,  6.03s/epoch(s), train_multiclassaccuracy\nTraining:  25%|▎| 63/250 [08:10<18:48,  6.03s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 64/250 [08:10<17:42,  5.71s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 64/250 [08:15<17:42,  5.71s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 65/250 [08:15<16:41,  5.41s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 65/250 [08:20<16:41,  5.41s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 66/250 [08:20<16:06,  5.26s/epoch(s), train_multiclassaccuracy\nTraining:  26%|▎| 66/250 [08:24<16:06,  5.26s/epoch(s), train_multiclassaccuracyEarly stopping at epoch 66 with validation loss 0.000 and training loss 1.006\n\nTraining:  26%|▎| 66/250 [08:24<23:27,  7.65s/epoch(s), train_multiclassaccuracy\n{'MulticlassAccuracy': tensor(0.6333)}\n/home/chetana/tensorboard/2023-04-25_16-29/model_ckpt_final_full_data.pt\ntrain/Accuracy tensor(0.6333)\nval/Accuracy tensor(0.7205)\n",
  "history_begin_time" : 1682440191996,
  "history_end_time" : 1682440702868,
  "history_notes" : null,
  "history_process" : "2x5xrm",
  "host_id" : "c2lqcn",
  "indicator" : "Done"
},{
  "history_id" : "nufej5bspv7",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181474,
  "history_end_time" : 1682440234545,
  "history_notes" : null,
  "history_process" : "n508da",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "wg2sfyr7tjt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181474,
  "history_end_time" : 1682440234545,
  "history_notes" : null,
  "history_process" : "rdt0gy",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "w3xbvapqyph",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181474,
  "history_end_time" : 1682440234545,
  "history_notes" : null,
  "history_process" : "xdwq7e",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "6k81jhlf3pt",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181475,
  "history_end_time" : 1682440234546,
  "history_notes" : null,
  "history_process" : "5yfzer",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "5ais8xorhye",
  "history_input" : "# Pytorch DataLoader\n\nimport numpy as np\nfrom dependency import os\nfrom device_config_and_data_loader import *\nfrom convert_to_pytorch_data_loader import *\n\n\n# link npz files\n\ndata_root = os.path.join(os.path.expanduser(\"~\"), \"ML_eddie\")\ntrain_folder = os.path.join(data_root, \"cds_ssh_1998-2018_10day_interval\")\nval_folder = os.path.join(data_root, \"cds_ssh_2019_10day_interval\")\ntrain_file = os.path.join(train_folder, \"subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz\")\nval_file = os.path.join(val_folder, \"subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz\")\n\n\n# Data Loader\n# set binary = false if we want to distinguish between cyclonic and anticyclonic\n\nbinary = False\nnum_classes = 2 if binary else 3\ntrain_loader, _ = get_eddy_dataloader(train_file, binary=binary, batch_size=batch_size)\nval_loader, _ = get_eddy_dataloader(\n    val_file, binary=binary, batch_size=batch_size, shuffle=False\n)\n\n\n# Class Distribution check\ntrain_masks = train_loader.dataset.masks.copy()\nclass_frequency = np.bincount(train_masks.flatten())\ntotal_pixels = sum(class_frequency)\n\n\nprint(\n    f\"Total number of pixels in training set: {total_pixels/1e6:.2f} megapixels\"\n    f\" across {len(train_masks)} SSH maps\\\\n\"\n    f\"Number of pixels that are not eddies: {class_frequency[0]/1e6:.2f} megapixels \"\n    f\"({class_frequency[0]/total_pixels * 100:.2f}%)\\\\n\"\n    f\"Number of pixels that are anticyclonic eddies: {class_frequency[1]/1e6:.2f} megapixels \"\n    f\"({class_frequency[1]/total_pixels * 100:.2f}%)\\\\n\"\n    f\"Number of pixels that are cyclonic eddies: {class_frequency[2]/1e6:.2f} megapixels \"\n    f\"({class_frequency[2]/total_pixels * 100:.2f}%)\\\\n\"\n)\n\n",
  "history_output" : "Read 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nRead 24 samples from /home/chetana/ML_eddie/cds_ssh_1998-2018_10day_interval/subset_pet_masks_with_adt_1998-1999_lat14N-46N_lon166W-134W.npz.\nRead 12 samples from /home/chetana/ML_eddie/cds_ssh_2019_10day_interval/subset_pet_masks_with_adt_2019_lat14N-46N_lon166W-134W.npz.\nTotal number of pixels in training set: 0.39 megapixels across 24 SSH maps\nNumber of pixels that are not eddies: 0.28 megapixels (72.00%)\nNumber of pixels that are anticyclonic eddies: 0.06 megapixels (14.23%)\nNumber of pixels that are cyclonic eddies: 0.05 megapixels (13.77%)\n\n",
  "history_begin_time" : 1682440185955,
  "history_end_time" : 1682440234546,
  "history_notes" : null,
  "history_process" : "fsy61n",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "4vrxu0eqrln",
  "history_input" : "No code saved",
  "history_output" : "Skipped",
  "history_begin_time" : 1682440181477,
  "history_end_time" : 1682440234546,
  "history_notes" : null,
  "history_process" : "sq4sw3",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
},{
  "history_id" : "1no2fag67gq",
  "history_input" : "#  Generate compress segmentaiton mask\n\nimport logging\n\nfrom compression_and_segmentation_utils import *\n\nfrom data_loader import *\n\n\n# Generate segmentaion mask\n\nlogging.getLogger(\"pet\").setLevel(logging.ERROR)\n\n# enter the AVISO filename pattern\n# year, month, and day in file_pattern will be filled in get_dates_and_files:\nfile_pattern = \"dt_global_twosat_phy_l4_{year:04d}{month:02d}{day:02d}_vDT2021.nc\"\n\n# training set: 1998 - 2018\ntrain_dates, train_files = get_dates_and_files(\n    range(1998, 2019), range(1, 13), [1, 10, 20, 30], train_folder, file_pattern\n)\ntrain_adt, train_adt_filtered, train_masks = generate_masks_in_parallel(\n    train_files, train_dates\n)\n\n\n# test set: 2019\ntest_dates, test_files = get_dates_and_files(\n    [2019], range(1, 13), [1, 10, 20, 30], test_folder, file_pattern\n)\ntest_adt, test_adt_filtered, test_masks = generate_masks_in_parallel(\n    test_files, test_dates\n)\n\n# copress Segmentaion masks to npz files\nlon_range = (-166, -134)\nlat_range = (14, 46)\n\ntrain_subset = subset_arrays(\n    train_masks,\n    train_adt,\n    train_adt_filtered,\n    train_dates,\n    lon_range,\n    lat_range,\n    plot=False,\n    resolution_deg=0.25,\n    save_folder=train_folder,\n)\n\ntest_subset = subset_arrays(\n    test_masks,\n    test_adt,\n    test_adt_filtered,\n    test_dates,\n    lon_range,\n    lat_range,\n    plot=True,\n    resolution_deg=0.25,\n    save_folder=test_folder,\n)\n\n# compress segmask\nlon_range = (-166, -134)\nlat_range = (14, 46)\n\ntrain_subset = subset_arrays(\n    train_masks,\n    train_adt,\n    train_adt_filtered,\n    train_dates,\n    lon_range,\n    lat_range,\n    plot=False,\n    resolution_deg=0.25,\n    save_folder=train_folder,\n)\n\ntest_subset = subset_arrays(\n    test_masks,\n    test_adt,\n    test_adt_filtered,\n    test_dates,\n    lon_range,\n    lat_range,\n    plot=True,\n    resolution_deg=0.25,\n    save_folder=test_folder,\n)",
  "history_output" : "Traceback (most recent call last):\n  File \"/home/chetana/gw-workspace/1no2fag67gq/preprocessing_and_compression.py\", line 5, in <module>\n    from compression_and_segmentation_utils import *\n  File \"/home/chetana/gw-workspace/1no2fag67gq/compression_and_segmentation_utils.py\", line 1\n    No code saved\n       ^^^^\nSyntaxError: invalid syntax\n",
  "history_begin_time" : 1682440181835,
  "history_end_time" : 1682440234547,
  "history_notes" : null,
  "history_process" : "shce7j",
  "host_id" : "c2lqcn",
  "indicator" : "Stopped"
}]
